# -*- coding: utf-8 -*-
"""
/***************************************************************************
 kmz_geopapaimport
                                 A QGIS plugin
 Import data from kmz
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-07-20
        git sha              : $Format:%H$
        copyright            : (C) 2025 by JMBA
        email                : juanbernales@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import json
import re
import xml.etree.ElementTree as ET
from pathlib import Path
from zipfile import BadZipFile, ZipFile

from qgis.core import (
    QgsCoordinateReferenceSystem,
    QgsCoordinateTransform,
    QgsProject,
)
from qgis.PyQt.QtCore import QCoreApplication, QSettings, QTranslator
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

from .kmz_geopapaimport_dialog import kmz_geopapaimportDialog
# Initialize Qt resources from file resources.py
from .resources import *


class kmz_geopapaimport:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = Path(__file__).resolve().parent
        # initialize locale
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = self.plugin_dir / "i18n" / f"kmz_geopapaimport_{locale}.qm"

        if locale_path.exists():
            self.translator = QTranslator()
            self.translator.load(str(locale_path))
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr("&Impport kmz files")

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("kmz_geopapaimport", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ":/plugins/kmz_geopapaimport/icon.png"
        self.add_action(
            icon_path,
            text=self.tr("Import kmz from geopaparazzi"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr("&Impport kmz files"), action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start:
            self.first_start = False
            self.dlg = kmz_geopapaimportDialog(parent=self.iface.mainWindow(), plugin=self)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass


def _get_form_fields(json_path, form_index):
    """Extracts the required form fields from the JSON file."""
    try:
        with open(json_path, "r", encoding="utf-8") as f:
            data = json.load(f)
        return [
            item["key"]
            for item in data[form_index]["forms"][0].get("formitems", [])
        ]
    except (json.JSONDecodeError, FileNotFoundError, IndexError) as e:
        raise ValueError(QCoreApplication.translate("kmz_geopapaimport", f"Could not process JSON file: {e}"))


def _get_kml_root(kmz_path):
    """Extracts and parses the KML file from a KMZ archive."""
    try:
        with ZipFile(kmz_path, "r") as kmz:
            if "kml.kml" not in kmz.namelist():
                raise FileNotFoundError(QCoreApplication.translate("kmz_geopapaimport", "kml.kml not found in the KMZ archive."))
            with kmz.open("kml.kml", "r") as kml_file:
                return ET.parse(kml_file).getroot()
    except (BadZipFile, FileNotFoundError) as e:
        raise ValueError(f"Could not process KMZ file: {e}")


def _clean_html_description(description):
    """Cleans the HTML content from the description tag."""
    text = re.sub(r"\n{2,}", ",", description)
    text = re.sub(r"\n", "", text)
    text = re.sub(
        r'<table.*?>.*?<tbody><tr><td.*?>.*?</td><td.*?>',
        "",
        text,
        flags=re.DOTALL,
    )
    text = re.sub(r"</td></tr></tbody></table>", "", text)
    text = re.sub(r"<h2>.*?</h2>", ",", text)
    text = re.sub(r"<.*?>", "", text)
    return text


def _get_coord_transformer(transform_coords, crs_proj4_string):
    """Creates a coordinate transformer if needed."""
    if not transform_coords:
        return None

    prj4_in = "+proj=longlat +datum=WGS84 +no_defs"
    prj4_out = crs_proj4_string

    if not prj4_out:
        raise ValueError(QCoreApplication.translate("kmz_geopapaimport", "CRS for transformation is not defined."))

    source_crs = QgsCoordinateReferenceSystem()
    source_crs.createFromProj4(prj4_in)
    dest_crs = QgsCoordinateReferenceSystem()
    dest_crs.createFromProj4(prj4_out)

    return QgsCoordinateTransform(source_crs, dest_crs, QgsProject.instance())


def process_kmz_file(
    kmz_path,
    json_path,
    dest_folder,
    form_index,
    form_name,
    transform_coords,
    crs_proj4_string,
):
    """
    Processes the KMZ file and generates a CSV.
    Lanza una excepci√≥n ValueError si algo sale mal.
    """
    form_fields = _get_form_fields(json_path, form_index)
    kml_root = _get_kml_root(kmz_path)
    coord_transformer = _get_coord_transformer(transform_coords, crs_proj4_string)

    output_path = dest_folder / f"{form_name}.csv"
    with open(output_path, "w", encoding="utf-8") as csv_file:
        # Write header
        header = ["formato"] + form_fields
        if coord_transformer:
            header.extend(["lon", "lat", "alt", "xrep", "yrep"])
        csv_file.write(",".join(header) + "\n")

        # Write data rows
        for placemark in kml_root.iterfind(
            ".//{http://www.opengis.net/kml/2.2}Placemark"
        ):
            name_element = placemark.find("{http://www.opengis.net/kml/2.2}name")
            if name_element is None or name_element.text != form_name:
                continue

            description_element = placemark.find(
                "{http://www.opengis.net/kml/2.2}description"
            )
            coordinates_element = placemark.find(
                ".//{http://www.opengis.net/kml/2.2}coordinates"
            )

            if description_element is None or coordinates_element is None:
                continue

            # Extract data and coordinates
            description_text = _clean_html_description(description_element.text)
            row_data = [form_name] + description_text.split(",")

            # Transform coordinates if requested
            if coord_transformer:
                coords_text = coordinates_element.text.strip()
                lon, lat, alt = coords_text.split(",")
                point = coord_transformer.transform(float(lon), float(lat))
                row_data.extend([lon, lat, alt, str(point.x()), str(point.y())])

            csv_file.write(",".join(row_data) + "\n")
    return output_path
